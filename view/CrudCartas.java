/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.event.ActionListener;
import java.awt.event.FocusListener;
import java.awt.event.MouseListener;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Cartas;
import model.Jogador;
import servicos.CartaServicos;
import servicos.JogadorServicos;
import servicos.ServicosFactory;
import util.Validadores;

/**
 *
 * @author artur
 */
public class CrudCartas extends javax.swing.JFrame implements ActionListener, MouseListener, FocusListener {

    /**
     * Creates new form CrudCartas
     */
    public CrudCartas() {
        initComponents();
        jbDeletar.setVisible(false);
        this.setLocationRelativeTo(null);
        addRowToTable();
    }
    public void limparCampos() {
        jtfnome.setText("");
        jtfedicao.setText("");
        jtfquantidade.setText("");
        jtfpreco.setText("");
        jtfdono.setText("");
    }
    public boolean validInputs() {
        if (jtfnome.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Campo Placa obrigatório!");
            jtfnome.requestFocus();
            return false;
        } else if (jtfedicao.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Campo Marca obrigatório!");
            jtfedicao.requestFocus();
            return false;
        } else if (jtfquantidade.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Campo Modelo obrigatório!");
            jtfquantidade.requestFocus();
            return false;
        } else if (jtfpreco.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Campo Cor obrigatório!");
            jtfpreco.requestFocus();
            return false;
        } else if (jtfdono.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Campo Ano de Fabricação obrigatório!");
            jtfdono.requestFocus();
            return false;
        }return true;}
public void addRowToTable() {
        DefaultTableModel model = (DefaultTableModel) jtcartas.getModel();
        model.getDataVector().removeAllElements();//remove todas as linhas
        model.fireTableDataChanged();
        Object rowData[] = new Object[9];
        CartaServicos cartaC = ServicosFactory.getCartaServicos();
        JogadorServicos pessoaS = ServicosFactory.getJogadorServicos();
        for (Cartas carta : cartaC.getCarta()) {
            rowData[0] = carta.getNome();
            rowData[1] = carta.getEdicao();
            rowData[2] = carta.getQuantidade();
            rowData[3] = carta.getPreco();
            rowData[4] = carta.getDono().getNome();
            model.addRow(rowData);

        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jtfnome = new javax.swing.JTextField();
        jtfedicao = new javax.swing.JTextField();
        jtfquantidade = new javax.swing.JTextField();
        jtfpreco = new javax.swing.JTextField();
        jtfdono = new javax.swing.JTextField();
        jbSair = new javax.swing.JButton();
        jbLimpar = new javax.swing.JButton();
        jbSalvar = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jbDeletar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtcartas = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Gerenciador de Cartas");

        jLabel2.setText("Nome:");

        jLabel3.setText("Edição:");

        jLabel4.setText("Quantidade:");

        jLabel5.setText("Preço:");

        jLabel6.setText("Dono:");

        jtfdono.addFocusListener(this);

        jbSair.setText("Sair");
        jbSair.addActionListener(this);

        jbLimpar.setText("Limpar");
        jbLimpar.addActionListener(this);

        jbSalvar.setText("Salvar");
        jbSalvar.addActionListener(this);

        jbEditar.setText("Editar");
        jbEditar.addActionListener(this);

        jbDeletar.setText("Deletar");
        jbDeletar.addActionListener(this);

        jtcartas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nome", "Edição", "Quuantidade", "Preço", "Dono"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtcartas.addMouseListener(this);
        jScrollPane2.setViewportView(jtcartas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfnome))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfedicao))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtfquantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtfpreco, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfdono))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jbDeletar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbEditar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbSalvar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbLimpar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbSair))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfnome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfedicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jtfquantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfpreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtfdono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSair)
                    .addComponent(jbLimpar)
                    .addComponent(jbSalvar)
                    .addComponent(jbEditar)
                    .addComponent(jbDeletar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == jbSair) {
            CrudCartas.this.jbSairActionPerformed(evt);
        }
        else if (evt.getSource() == jbLimpar) {
            CrudCartas.this.jbLimparActionPerformed(evt);
        }
        else if (evt.getSource() == jbSalvar) {
            CrudCartas.this.jbSalvarActionPerformed(evt);
        }
        else if (evt.getSource() == jbEditar) {
            CrudCartas.this.jbEditarActionPerformed(evt);
        }
        else if (evt.getSource() == jbDeletar) {
            CrudCartas.this.jbDeletarActionPerformed(evt);
        }
    }

    public void focusGained(java.awt.event.FocusEvent evt) {
    }

    public void focusLost(java.awt.event.FocusEvent evt) {
        if (evt.getSource() == jtfdono) {
            CrudCartas.this.jtfdonoFocusLost(evt);
        }
    }

    public void mouseClicked(java.awt.event.MouseEvent evt) {
        if (evt.getSource() == jtcartas) {
            CrudCartas.this.jtcartasMouseClicked(evt);
        }
    }

    public void mouseEntered(java.awt.event.MouseEvent evt) {
    }

    public void mouseExited(java.awt.event.MouseEvent evt) {
    }

    public void mousePressed(java.awt.event.MouseEvent evt) {
    }

    public void mouseReleased(java.awt.event.MouseEvent evt) {
    }// </editor-fold>//GEN-END:initComponents

    private void jbSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSairActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jbSairActionPerformed

    private void jbLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimparActionPerformed
        if (jbLimpar.getText().equals("Limpar")) {
            limparCampos();

        } else {
            jbEditar.setEnabled(false);
            jbLimpar.setText("Limpar");
            limparCampos();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jbLimparActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        if (validInputs()) {
            JogadorServicos jogadorJ = ServicosFactory.getJogadorServicos();
            CartaServicos cartaC = ServicosFactory.getCartaServicos();
            String nome = jtfnome.getText().toUpperCase();
            String edicao = jtfedicao.getText().toUpperCase();

            int quantidade = Integer.parseInt(jtfquantidade.getText());
            int preco = Integer.parseInt(jtfpreco.getText());

            Jogador dono = jogadorJ.getjogadorByDoc(jtfdono.getText());
            Cartas c = new Cartas(nome, edicao, quantidade, preco, dono);
            if (jbSalvar.getText().equals("Salvar")) {
                cartaC.cadastroCarta(c);
            } else {
                cartaC.atualizarCartaDAO(c);
            }
            addRowToTable();
            jbLimpar.doClick();

        }        // TODO add your handling code here:
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        jbDeletar.setVisible(false);
        jbSalvar.setText("Confirmar");
        jbLimpar.setText("Cancelar");
        jtfnome.setEnabled(false);
        int linha = jtcartas.getSelectedRow();
        String nome = (String) jtfnome.getText();
        CartaServicos cartasC = ServicosFactory.getCartaServicos();
        Cartas c = cartasC.getcardbyname(nome);
        jtfdono.setText(c.getDono().getCpf());
        jtfnome.setText(c.getNome());
        jtfquantidade.setText(Integer.toString(c.getQuantidade()));
        jtfpreco.setText(Integer.toString(c.getPreco()));
        jtfedicao.setText(c.getEdicao());
        jtfdono.setText(c.getDono().getNome());
        // TODO add your handling code here:
    }//GEN-LAST:event_jbEditarActionPerformed

    private void jbDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeletarActionPerformed
int linha = jtcartas.getSelectedRow();
        String nome = (String) jtcartas.getValueAt(linha, 0);
        CartaServicos cartaC = ServicosFactory.getCartaServicos();
        Object[] btnMSG = {"Sim", "Não"};
        int resp = JOptionPane.showOptionDialog(this, "Deseja realmente deletar " + nome, "Deletar Carro", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, btnMSG, btnMSG[0]);
        if (resp == 0) {
            cartaC.deletacarta(nome);
            addRowToTable();
            JOptionPane.showMessageDialog(this, "Cadastro removido");
        } else {
            JOptionPane.showMessageDialog(this, "Operação cancelada pelo usuário");
        }
        jbLimpar.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jbDeletarActionPerformed

    private void jtcartasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtcartasMouseClicked
jbDeletar.setVisible(true);
        jbEditar.setEnabled(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jtcartasMouseClicked

    private void jtfdonoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfdonoFocusLost
if (!jtfdono.getText().equals("")) {
            JogadorServicos jogadorJ = ServicosFactory.getJogadorServicos();
            String cpf, nome;
            cpf = jtfdono.getText();
            if (Validadores.isCPF(cpf)) {
                nome = jogadorJ.getjogadorByDoc(cpf).getNome();
                if (nome == null) {
                    JOptionPane.showMessageDialog(this, "Pessoa não existe");
                    jtfdono.requestFocus();
                } else {
                    Object[] btnMSG = {"Sim", "Não"};
                    int resp = JOptionPane.showOptionDialog(this, "Tem certeza que " + nome + " é o proprietário?", " Propiretário ", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, btnMSG, btnMSG[0]);
                    if (resp == 0) {
                        jtfdono.setText(nome);
                    } else {
                        jtfdono.requestFocus();
                        jtfdono.setText("");
                    }

                }
            } else {
                JOptionPane.showMessageDialog(this, "cpf invalido");
                jtfdono.requestFocus();
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jtfdonoFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrudCartas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrudCartas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrudCartas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrudCartas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CrudCartas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbDeletar;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbLimpar;
    private javax.swing.JButton jbSair;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JTable jtcartas;
    private javax.swing.JTextField jtfdono;
    private javax.swing.JTextField jtfedicao;
    private javax.swing.JTextField jtfnome;
    private javax.swing.JTextField jtfpreco;
    private javax.swing.JTextField jtfquantidade;
    // End of variables declaration//GEN-END:variables
}
